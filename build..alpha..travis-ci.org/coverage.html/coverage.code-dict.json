{"/home/travis/build/npmtest/node-npmtest-gitter-cli/test.js":"/* istanbul instrument in package npmtest_gitter_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gitter-cli/lib.npmtest_gitter_cli.js":"/* istanbul instrument in package npmtest_gitter_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gitter_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gitter_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gitter-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gitter-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gitter_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gitter_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gitter_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gitter_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gitter_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gitter_cli.__dirname + '/lib.npmtest_gitter_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gitter-cli/node_modules/gitter-cli/bin/gitter-cli":"#!/usr/bin/env node\n\nrequire('../lib/main.js');\n","/home/travis/build/npmtest/node-npmtest-gitter-cli/node_modules/gitter-cli/lib/main.js":"var Program = require('commander');\nvar Commands = require('./commands');\n\n// Define the program commands.\nProgram.version(require('../package.json').version);\n\nProgram\n  .command('join [name]')\n  .alias('j')\n  .description('Join a room with the specified name.')\n  .action(Commands.joinRoom);\n\nProgram\n  .command('authorize')\n  .alias('set-auth')\n  .description('Set the access-key token for client authentication.')\n  .action(Commands.authorize);\n\nProgram\n  .command('whoami')\n  .alias('me')\n  .description('Display your user information based on the existing token.')\n  .action(Commands.whoAmI);\n\nProgram\n  .command('rooms')\n  .alias('status')\n  .description('Display a list of rooms that you are part of.')\n  .action(Commands.rooms);\n\nProgram\n  .option('--token [token]', 'Set the access-key token for client authentication. This won\\'t be persisted.');\n\n// Parse the application arguments.\nProgram.parse(process.argv);\n\n// Check if there are no arguments.\nif (!process.argv.slice(2).length) {\n  // Display the application help.\n  Program.outputHelp();\n}\n\n// Check if there is a token on the arguments.\nif (Program.token) {\n  Commands.setToken(Program.token);\n}\n","/home/travis/build/npmtest/node-npmtest-gitter-cli/node_modules/gitter-cli/lib/commands.js":"var Q = require('q');\nvar chalk = require('chalk');\n\nvar Gitter = require('./core/connection');\nvar User = require('./models/user');\nvar Configuration = require('./core/configuration');\n\nvar Commands = {\n\n  /**\n   * Authorization required wrapper.\n   *\n   * @private\n   * @param {bool} requireAuthentication\n   * @return {void}\n   */\n  _requireAuthentication: function (requireAuthentication) {\n    var defer = Q.defer();\n\n    if (typeof requireAuthentication === 'undefined' || requireAuthentication) {\n      Gitter.then(function (gitterInstance) {\n        defer.resolve();\n      }).catch(function () {\n        defer.reject();\n      });\n    } else {\n      defer.resolve();\n    }\n\n    return defer.promise;\n  },\n\n  /**\n   * Authorize a token or display a message to informe\n   * the user how to get it.\n   *\n   * @param {string} token\n   * @return {void}\n   */\n  authorize: function (token) {\n    if (typeof token === 'string') {\n      // Set the token based on the user input.\n      Configuration.access.setToken(token).catch(function () {\n        // Or if the token is not correct, display an error.\n        console.log('\\n%s\\n', chalk.red('The token is not correct.'));\n      });\n\n      // Stop the execution of the method.\n      return undefined;\n    }\n\n    // Display the \"Go to url\" message with the instructions on the screen.\n    console.log('\\nLog in at %s to get your access token.',\n      chalk.blue('https://developer.gitter.im/apps')\n    );\n    console.log('Then, copy your %s and run:\\n', chalk.bold('Personal Access Token'));\n    console.log('    %s %s',\n      chalk.bold('gitter-cli authorize'),\n      chalk.bold(chalk.green('paste-your-token-here'))\n    );\n    console.log(chalk.dim(\n      '\\n\\nVisit the repository to know what\\'s happening behind the scenes:',\n      chalk.blue('\\nhttps://github.com/RodrigoEspinosa/gitter-cli')\n    ));\n  },\n\n  /**\n   * Display current user information or \"You are not logged in.\"\n   * message if the user doesn't have a valid token.\n   *\n   * @return {void}\n   */\n  whoAmI: function () {\n    // Get the logged in user instance.\n    Commands._requireAuthentication(true).then(User.getCurrentUser).then(function (user) {\n      // Display the user display name and username.\n      console.log('\\n     You are: %s (%s)\\n',\n        chalk.bold(user.displayName), user.username\n      );\n    }).catch(function () {\n      // Display an unauthenticated user message.\n      console.log('You are not logged in.');\n    });\n  },\n\n  /**\n   * Join a room an display the interface for the chat.\n   *\n   * @param {string} roomName\n   * @return {void}\n   */\n  joinRoom: function (roomName) {\n    // Ensure that the room name is a string.\n    if (typeof roomName !== 'string') {\n      // If the room name is not a string, display a error message.\n      console.log(chalk.red('You must provide a valid room name.'));\n      // Finish the script excecution.\n      process.exit(1);\n    }\n\n    Commands._requireAuthentication(true).then(function () {\n      // Require the `Room` model.\n      var Room = require('./models/room');\n\n      // Try to join a room.\n      var room = new Room();\n      room.join(roomName);\n\n      // Load the user interface.\n      var ui = require('./ui/main')({ room: room });\n    });\n  },\n\n  /**\n   * Displays a list of rooms that the users is part of.\n   *\n   * @return {void}\n   */\n  rooms: function () {\n    /**\n     * Display every room on the rooms lists with a color\n     * based on the unreadItems.\n     *\n     * @param {list}\n     * @return {void}\n     */\n    var displayRooms = function (rooms) {\n      // Get the maximum room length name of the list.\n      var maxRoomLength = rooms.map(function (room) {\n        return room.name.length;\n      }).reduce(function (prev, val) {\n        return (prev > val) ? prev : val;\n      }, 0);\n\n      // Increase the max room length to consider the space.\n      maxRoomLength += 1;\n\n      // Display every room.\n      rooms.forEach(function (room, index) {\n        // Set the format for the room name.\n        var roomName = room.name;\n        if (roomName.length > maxRoomLength) {\n          roomName = roomName.substring(0, maxRoomLength - 3) + '...';\n        } else {\n          roomName += Array(maxRoomLength - roomName.length).join(' ');\n        }\n\n        // Get the badge for the current item based on the number of unread messages.\n        var badge = (room.unreadItems > 0) ? chalk.green : chalk.bgBlack;\n\n        // Display the item in the console.\n        console.log(badge(\n          ++index + '.',                        // Display the index number.\n          Array((index > 9) ? 4 : 5).join(' '), // Display a empty amount of spaces.\n          roomName,                             // Display the room name.\n          room.unreadItems                      // Display the unread messages count.\n        ));\n      });\n    };\n\n    // Display each of the user rooms if the user is authenticated.\n    Commands._requireAuthentication(true)\n      .then(User.getCurrentUser)\n      .then(function (user) { return user.rooms(); })\n      .then(displayRooms)\n      .catch(function () {\n        console.log('You are not logged in.');\n      });\n  },\n\n  /**\n   * Set the access token to be the specified token.\n   *\n   * @param {string} token\n   * @return {void}\n   */\n  setToken: function (token) {\n    require('./core/configuration').access.setToken(token);\n  }\n};\n\nexports = module.exports = Commands;\n","/home/travis/build/npmtest/node-npmtest-gitter-cli/node_modules/gitter-cli/lib/core/connection.js":"var Q = require('q');\nvar Gitter = require('node-gitter');\nvar configuration = require('./configuration');\n\nvar getTokenAndConnect = function () {\n  var connectionDefer = Q.defer();\n\n  configuration.access.getToken().then(function (token) {\n    var gitter = new Gitter(token);\n\n    gitter.reload = getTokenAndConnect;\n\n    connectionDefer.resolve(gitter);\n\n  }).catch(function (err) {\n    connectionDefer.reject(err);\n  });\n\n  return connectionDefer.promise;\n};\n\nexports = module.exports = getTokenAndConnect();\n","/home/travis/build/npmtest/node-npmtest-gitter-cli/node_modules/gitter-cli/lib/core/configuration.js":"var Fs = require('fs');\nvar Path = require('path');\nvar Q = require('q');\nvar Keychain = require('keychain');\n\nvar Configuration = {\n  secretsFileLocation: Path.join(__dirname, 'secrets.json'),\n\n  /**\n   * Load the secrets file. `fs.readFile` wrapper.\n   *\n   * @param {function} callback.\n   * @return {function}\n   */\n  _loadSecrets: function (callback) {\n    return Fs.readFile(Configuration.secretsFileLocation, {encoding: 'utf8'}, callback);\n  },\n\n  /**\n   * Synchronously load the secrets file.\n   *\n   * @return {string}\n   */\n  _loadSecretsSync: function () {\n    return Fs.readFileSync(Configuration.secretsFileLocation, {encoding: 'utf8'});\n  },\n\n  /**\n   * Get the contents of the secret file.\n   *\n   * @return {object}\n   */\n  _getSecrets: function () {\n    try {\n      return JSON.parse(Configuration._loadSecretsSync());\n    } catch (error) {\n      return {};\n    }\n  },\n\n  /**\n   * Store the current session token.\n   *\n   * @static\n   */\n  token: null,\n\n  access: {\n    /**\n     * TODO Needs to be implemented.\n     * Check if token is correct.\n     *\n     * @private\n     * @param {String} token.\n     * @return {boolean}\n     */\n    _isTokenCorrect: function (token) {\n      return true;\n    },\n\n    /**\n     * Get the token from the secrets file.\n     *\n     * @return {promise}\n     */\n    getToken: function () {\n      // TODO Sync this\n      // return Keychain.getPassword({\n      //   account: 'default',\n      //   service: 'gitter-cli'\n      // });\n\n      // Construct the promise instance.\n      var deferred = Q.defer();\n\n      // Check if the session token already exists.\n      if (Configuration.token !== null) {\n        // Resolve the promise with the existing token.\n        return deferred.resolve(token);\n      }\n\n      // Read the json formatted file where the secrets settings lives.\n      var secretsData = Configuration._getSecrets();\n\n      // Ensure that the secrets has an authentication-token attribute.\n      if (!secretsData.hasOwnProperty('authentication-token')) {\n        deferred.reject(new Error('Secrets file has no authentication-token.'));\n      } else {\n        // Set the configuration token.\n        Configuration.token = secretsData['authentication-token'];\n\n        // Resolve the promise with the token.\n        deferred.resolve(Configuration.token);\n      }\n\n      // Return the promise object.\n      return deferred.promise;\n    },\n\n    /**\n     * Set the token for the secrets file.\n     *\n     * @param {string} token\n     * @return {void}\n     */\n    setToken: function (token) {\n      // TODO Add this................\n      // return Keychain.setPassword({\n      //   account: 'default',\n      //   service: 'gitter-cli',\n      //   password: token\n      // });\n      // TODO end this................\n\n      var deferred = Q.defer();\n\n      // Check if the token is correct.\n      if (Configuration.access._isTokenCorrect(token)) {\n        // Ensure that the secrets file exists.\n        if (!Fs.existsSync(Configuration.secretsFileLocation)) {\n          Fs.writeFileSync(Configuration.secretsFileLocation, '{}');\n        }\n\n        // Save the token into the configuration attribute.\n        Configuration.token = token;\n\n        // Get an object with the secrets content.\n        var secretsData = Configuration._getSecrets();\n\n        // Set the configuration token on the data.\n        secretsData['authentication-token'] = token;\n\n        var data = JSON.stringify(secretsData, null, 2);\n\n        // Update the secrets file with the upadted token.\n        Fs.writeFile(Configuration.secretsFileLocation, data, function (err) {\n          if (err) deferred.reject(err);\n\n          // Resolve the promise.\n          deferred.resolve();\n        });\n      } else {\n        // Reject the promise with \"Invalid token\" error.\n        deferred.reject(new Error('Invalid token.'));\n      }\n\n\n      // Return the promise.\n      return deferred.promise;\n    }\n  }\n};\n\nexports = module.exports = Configuration;\n","/home/travis/build/npmtest/node-npmtest-gitter-cli/node_modules/gitter-cli/lib/models/user.js":"var Q = require('q');\nvar Gitter = require('../core/connection');\nvar Styles = require('../ui/styles.json');\n\n/**\n * Get a random element from the array.\n * @return {object} element\n */\nArray.prototype.random = function () {\n  return this[~~(Math.random() * this.length)];\n};\n\nvar authorColorList = Styles['author-possible-colors'];\n\n// Set a singleton object with all the existing users in the program.\nvar userInstances = {};\n\nvar User = function (data) {\n  /** If defined, the object have following structure:\n   *\n   *  fromUser: {\n   *    id: ObjectId,\n   *    username: String,\n   *    displayName: String,\n   *    url: String,\n   *    avatarUrlSmall: Url,\n   *    avatarUrlMedium: Url,\n   *    gv: String,\n   *    v: Number\n   *  }\n   */\n};\n\n/**\n * Method triggered after instance creation.\n */\nUser.prototype.postInit = function () {\n\n  if (!userInstances.hasOwnProperty(this.username)) {\n    userInstances[this.username] = this;\n  }\n};\n\n/**\n * Get the user username.\n * @return {string} username\n */\nUser.prototype.getUsername = function () {\n  return this.username;\n};\n\n/**\n * Get the user display name.\n * @return {string} displayName\n */\nUser.prototype.getDisplayName = function () {\n  if (this.displayName && this.displayName.trim() !== '') {\n    return this.displayName;\n  }\n\n   return '@' + this.getUsername();\n};\n\n/**\n * Get the user representative color.\n * @return {string} color\n */\nUser.prototype.getAuthorColor = function () {\n  if (this.color !== undefined) {\n    return this.color;\n  }\n\n  this.color = authorColorList.random();\n  return this.color;\n};\n\n/**\n * Get the current logged in user.\n * @return {promise} userPromise\n */\nUser.getCurrentUser = function () {\n  var defer = Q.defer();\n\n  Gitter.then(function (gitter) {\n    gitter.currentUser().then(function (currentUser) {\n      defer.resolve(currentUser);\n    }).catch(function (err) {\n      defer.reject(err);\n    });\n  });\n\n  return defer.promise;\n};\n\n/**\n * Create a new user instance from a payload.\n * @param  {object} data userData\n * @return {object}      userInstance\n */\nUser.createInstance = function (data) {\n  var user = new User();\n\n  // Check if the data is defined.\n  if (typeof data !== 'undefined') {\n    // Add every attribute to the current instance.\n    for (var attrName in data) {\n      if (data.hasOwnProperty(attrName)) {\n        user[attrName] = data[attrName];\n      }\n    }\n  }\n\n  // Call the user post contructor method.\n  user.postInit();\n\n  // Return the user instance.\n  return user;\n};\n\n/**\n * Get a user instance based on the payload.\n * Will retrive the user instance if there is one already created\n * on the user list or create a new instance if there is not.\n * @param  {object} user userData\n * @return {object}      userInstance\n */\nUser.getOrCreate = function (user) {\n  if (userInstances.hasOwnProperty(user.username)) {\n    return userInstances[user.username];\n  }\n  return User.createInstance(user);\n};\n\n\nexports = module.exports = User;\n","/home/travis/build/npmtest/node-npmtest-gitter-cli/node_modules/gitter-cli/lib/core/logger.js":"var Winston = require('winston');\n\nvar logger = new (Winston.Logger)({\n  transports: [\n    new (Winston.transports.File)({\n      filename: 'gitter-cli.log'\n    })\n  ]\n});\n\n\nexports = module.exports = logger;\n","/home/travis/build/npmtest/node-npmtest-gitter-cli/node_modules/gitter-cli/lib/core/marked.js":"/**\n * This is an override of marked to be compatible with Blessed tags.\n *\n * It will override all the Renderer methods.\n */\n\nvar chalk = require('chalk');\nvar marked = require('marked');\n\nvar Renderer = Object.create(marked.Renderer);\n\n// Const declaration.\nvar ITALIC_COLOR = '#989898';\n\n\nRenderer.prototype.code =\nRenderer.prototype.codespan =\nRenderer.prototype.paragraph = function (text) {\n  return text;\n};\n\n// Renderer.prototype.blockquote = function(quote) {\n//   return '<blockquote>\\n' + quote + '</blockquote>\\n';\n// };\n//\n// Renderer.prototype.html = function(html) {\n//   return html;\n// };\n//\n// Renderer.prototype.heading = function(text, level, raw) {\n//   return '<h'\n//     + level\n//     + ' id=\"'\n//     + this.options.headerPrefix\n//     + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n//     + '\">'\n//     + text\n//     + '</h'\n//     + level\n//     + '>\\n';\n// };\n//\n// Renderer.prototype.hr = function() {\n//   return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n// };\n//\n// Renderer.prototype.list = function(body, ordered) {\n//   var type = ordered ? 'ol' : 'ul';\n//   return '<' + type + '>\\n' + body + '</' + type + '>\\n';\n// };\n//\n// Renderer.prototype.listitem = function(text) {\n//   return '<li>' + text + '</li>\\n';\n// };\n//\n// Renderer.prototype.paragraph = function(text) {\n//   return '<p>' + text + '</p>\\n';\n// };\n//\n// Renderer.prototype.table = function(header, body) {\n//   return '<table>\\n'\n//     + '<thead>\\n'\n//     + header\n//     + '</thead>\\n'\n//     + '<tbody>\\n'\n//     + body\n//     + '</tbody>\\n'\n//     + '</table>\\n';\n// };\n//\n// Renderer.prototype.tablerow = function(content) {\n//   return '<tr>\\n' + content + '</tr>\\n';\n// };\n//\n// Renderer.prototype.tablecell = function(content, flags) {\n//   var type = flags.header ? 'th' : 'td';\n//   var tag = flags.align\n//     ? '<' + type + ' style=\"text-align:' + flags.align + '\">'\n//     : '<' + type + '>';\n//   return tag + content + '</' + type + '>\\n';\n// };\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '{bold}' + text + '{/bold}';\n};\n\nRenderer.prototype.em = function(text) {\n  return '{' + ITALIC_COLOR + '-fg}*' + text + '*{/' + ITALIC_COLOR + '-fg}';\n};\n\nRenderer.prototype.br = function() {\n  return '\\n';\n};\n\nRenderer.prototype.del = function(text) {\n  return chalk.strikethrough(text);\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  return '{underline}' + href + '{/underline}';\n};\n\n// Renderer.prototype.image = function(href, title, text) {\n//   var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n//   if (title) {\n//     out += ' title=\"' + title + '\"';\n//   }\n//   out += this.options.xhtml ? '/>' : '>';\n//   return out;\n// };\n\nRenderer.prototype.mention = function(href, title, text) {\n  var screenName = text.charAt(0) === '@' ? text.substring(1) : text;\n  // return util.format('<span data-link-type=\"mention\" data-screen-name=\"%s\" class=\"mention\">%s</span>', screenName, text);\n  return 'hohohoh' + screenName;\n};\n\nmarked.Renderer = Renderer;\n\nexports = module.exports = marked;\n","/home/travis/build/npmtest/node-npmtest-gitter-cli/node_modules/gitter-cli/lib/models/message.js":"var format = require('util').format;\n\nvar User = require('./user');\n\n/**\n * Represents a message.\n * @constructor\n */\nvar Message = function () {\n  // id: ObjectId,\n  // text: String,\n  // html: String,\n  // sent: Date,\n  // editedAt: Date || null,\n  // fromUser: {\n  //   id: ObjectId,\n  //   username: String,\n  //   displayName: String,\n  //   url: String,\n  //   avatarUrlSmall: Url,\n  //   avatarUrlMedium: Url,\n  //   gv: String,\n  //   v: Number\n  // },\n  // unread: Boolean,\n  // readBy: Number,\n  // urls: Array,\n  // mentions: Array,\n  // issues: Array,\n  // meta: Object\n  //\n};\n\n/**\n * Method triggered after instance creation.\n */\nMessage.prototype.postInit = function () {\n  // Set the message author attribute with the `Author` instance.\n  this.author = User.getOrCreate(this.fromUser);\n};\n\n/**\n * Get the message text.\n * @return {string} text\n */\nMessage.prototype.getText = function () {\n  return this.text || '';\n};\n\n/**\n * Get the message author display name.\n * @return {string} authorDisplayName\n */\nMessage.prototype.getAuthor = function () {\n  return this.author.displayName;\n};\n\n/**\n * Get the message author display name wrapped with his user color.\n * @return {string} authorWithColor\n */\nMessage.prototype.getAuthorWithColor = function () {\n  // Get the author color.\n  var color = this.author.getAuthorColor();\n\n  // Return the author name wrapped with his user color.\n  return format('{%s-fg}%s{/%s-fg}', color, this.author.getDisplayName(), color);\n};\n\n/**\n * Convert a recived message object insto `Message` instance.\n *\n * @param {string} message\n * @return {string}\n */\nMessage.createInstance = function (message) {\n  // Intialize the `Message` instance.\n  var instance = new Message();\n\n  if (message.hasOwnProperty('model')) {\n    message = message.model;\n  }\n\n  for (var attrName in message) {\n    if (message.hasOwnProperty(attrName)) {\n      instance[attrName] = message[attrName];\n    }\n  }\n\n  // Call the user post contructor method.\n  instance.postInit();\n\n  // Return the `Message` instance.\n  return instance;\n};\n\n/**\n * Convert a recived messages list objects into `Messages` instances.\n *\n * @param {string} message\n * @return {string}\n */\nMessage.createInstancesList = function (messages) {\n  // Initialize the instances list.\n  var instancesList = [];\n\n  // Create a new instance for every message object.\n  messages.forEach(function (message) {\n    // Push the new instance into the instances list.\n    instancesList.push(Message.createInstance(message));\n  });\n\n  // Return the list of instances.\n  return instancesList;\n};\n\nexports = module.exports = Message;\n","/home/travis/build/npmtest/node-npmtest-gitter-cli/node_modules/gitter-cli/lib/models/room.js":"var Q = require('q');\nvar format = require('util').format;\nvar events = require('events');\n\nvar Gitter = require('../core/connection');\nvar logger = require('../core/logger');\nvar Message = require('./message');\n\nvar Room = function () {\n  this._name = null;\n  this._instance = null;\n\n  var emitter = new events.EventEmitter();\n  this.emit = emitter.emit;\n  this.on = emitter.on;\n};\n\n/**\n * Join a room based on the room name.\n * @param  {string} roomName\n * @return {promise} roomPromise\n */\nRoom.prototype.join = function (roomName) {\n  var self = this;\n  var deferred = Q.defer();\n\n  Gitter.then(function (gitter) {\n    // Get the join room promise.\n    var joinRoom = gitter.rooms.join(roomName);\n\n    // Handle the room successful joined.\n    joinRoom.then(function (room) {\n      // Set the private room instance and name properties.\n      self._name = roomName;\n      self._instance = room;\n\n      // Log the joined room event.\n      logger.info(format('Joined room: %s', room.name));\n\n      // Emit the joined room event.\n      self.emit('join', self._instance);\n\n      room.chatMessages().then(function (messages) {\n        messages = Message.createInstancesList(messages);\n        self.emit('chatMessages', messages);\n      });\n\n      // Fetch the streaming events.\n      var roomStreaming = room.streaming().chatMessages();\n\n      roomStreaming.on('chatMessages', function (message) {\n        if (message.operation === 'create') {\n          message = Message.createInstance(message);\n          self.emit('streaming:chatMessages', message);\n        } else if (message.operation === 'update') {\n          // TODO Implement message updating.\n        } else {\n          // TODO\n        }\n      });\n\n    });\n\n    // Handle the room failed joined.\n    joinRoom.fail(function (err) {\n      // Log the failed joined room event.\n      logger.error(format('Not possible to join the room: %s', err));\n\n      // Emit the joined room event.\n      self.emit('joinError', err);\n\n      deferred.reject(err);\n    });\n\n    deferred.resolve(joinRoom);\n  });\n\n  return deferred.promise;\n};\n\n/**\n * Write a new message in the current room.\n * @param  {string} msg\n * @return {promise}\n */\nRoom.prototype.writeMessage = function (msg) {\n  if (this._instance === null) {\n    logger.error('Not possible to write a message. No room instance.');\n    // TODO: Throw new error\n    return false;\n  }\n\n  return this._instance.send(msg);\n};\n\n// Export the room model.\nexports = module.exports = Room;\n","/home/travis/build/npmtest/node-npmtest-gitter-cli/node_modules/gitter-cli/lib/ui/events.js":"exports = module.exports = function (UI) {\n\n  /**\n   * Set the chat history height based on the screen height.\n   *\n   * @returns {void}\n   */\n  var setHistoryHeight = function () {\n    // Set the history component dynamic height.\n    UI.components.history.height = UI.screen.height - UI.components.input.height;\n  };\n\n  /**\n   * Send a message based on the input component value.\n   * Then, clear the input component.\n   * @returns {void}\n   */\n  var sendMessage = function () {\n    var message = UI.components.input.getValue();\n    UI.context.room.writeMessage(message);\n\n    UI.components.input.clearValue();\n    UI.screen.render();\n  };\n\n  UI.screen.on('prerender', function () {\n    setHistoryHeight();\n  });\n\n  UI.screen.on('resize', function () {\n    setHistoryHeight();\n    UI.screen.render();\n  });\n\n  // Handle `Control+s` to send the message.\n  UI.screen.program.on('keypress', function (ch, key) {\n    if (key.ctrl && key.name === 's') {\n      sendMessage();\n    }\n  });\n\n  // Quit on `q`, or `Control-C` when the focus is on the screen.\n  UI.screen.key(['q', 'C-c'], function (ch, key) {\n    return process.exit(0);\n  });\n\n  // Focus on `escape` or `i` when focus is on the screen.\n  UI.screen.key(['escape', 'i'], function () {\n    // Set the focus on the input.\n    UI.components.input.focus();\n  });\n\n  // History scrolling events.\n  UI.screen.key(['up', 'k', 'C-up', 'C-k'], function (ch, key) {\n    var amount = (key.ctrl) ? 10 : 1;\n    UI.components.history.scrollUp();\n  });\n  UI.screen.key(['down', 'j', 'C-down', 'C-j'], function (ch, key) {\n    var amount = (key.ctrl) ? 10 : 1;\n    UI.components.history.scrollDown();\n  });\n\n  // Handle the event when fetching the last messages.\n  UI.context.room.on('chatMessages', function (messages) {\n    // Get each message.\n    messages.forEach(function (message) {\n      // Append the message string to the history list.\n      UI.components.history.addMessage(message);\n    });\n\n    // Go to the end of the list.\n    UI.components.history.setScrollPerc(100);\n  });\n\n  // Handle the new chat message event on the streaming.\n  UI.context.room.on('streaming:chatMessages', function (message) {\n    // Append the message string to the history list.\n    UI.components.history.addMessage(message);\n\n    // Go to the end of the list.\n    UI.components.history.setScrollPerc(100);\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-gitter-cli/node_modules/gitter-cli/lib/ui/history.js":"var ChatHistory = require('./widgets/chat-history');\nvar Blessed = require('blessed');\nvar Styles = require('./styles.json');\nvar logger = require('../core/logger');\n\nexports = module.exports = function (context) {\n  // Create the new chat history instance.\n  var history = ChatHistory({\n    top: 0,\n    left: 0,\n    tags: true,\n    width: '100%',\n    padding: 1,\n    scrollbar: true,\n    scrollable: true,\n    style: Styles.history\n  });\n\n  // Return the chat history instance.\n  return history;\n};\n","/home/travis/build/npmtest/node-npmtest-gitter-cli/node_modules/gitter-cli/lib/ui/widgets/chat-history.js":"var Blessed = require('blessed');\nvar wordwrap = require('wordwrap');\n\nvar logger = require('../../core/logger');\n\nvar ChatHistoryMessage = require('./chat-history-message');\n\nvar ChatHistory = function (options) {\n  if (!(this instanceof Blessed.Node)) {\n    return new ChatHistory(options);\n  }\n\n  options = options || {};\n  options.shrink = true;\n  Blessed.Element.call(this, options);\n};\n\nChatHistory.prototype = Object.create(Blessed.Element.prototype);\nChatHistory.prototype.type = 'chatHistory';\n\n// Set an empty collection for storing the current messages in the chat history.\nChatHistory.prototype.messages = [];\n\nChatHistory.prototype.getTotalLines = function () {\n  return this.children.map(function (node) {\n    return node.message.linesAmount;\n  }).reduce(function (prevVal, actualVal) {\n    return prevVal + actualVal;\n  }, 0);\n};\n\n/**\n * Get the last message from the message history.\n *\n * @returns {object}\n */\nChatHistory.prototype.getLastMessage = function () {\n  return this.messages[this.messages.length - 1];\n};\n\n/**\n * Add a message to the chat history board.\n *\n * @param {string}\n * @return {void}\n */\nChatHistory.prototype.addMessage = function (message) {\n  // Check if the last message is from the same author.\n  var isSameAuthor = false;\n  if (this.messages.length > 0) {\n    isSameAuthor = this.getLastMessage().author.id === message.author.id;\n  }\n\n  var options = {\n    screen: this.screen,\n    align: this.align || 'left',\n    right: (this.scrollbar ? 1 : 0),\n    tags: this.parseTags,\n    displayAuthorName: !isSameAuthor,\n    model: message,\n  };\n\n  var chatMessage = new ChatHistoryMessage(options);\n\n  chatMessage.position.top = this.getTotalLines();\n\n  // Add the message to the chat history messages collection.\n  this.messages.push(message);\n  this.append(chatMessage);\n};\n\n/**\n * Scroll the chat history board one line up.\n *\n * @return {void}\n */\nChatHistory.prototype.scrollUp = function () {\n  if (this.getScrollPerc() > 0) {\n    this.setScrollPerc(this.getScrollPerc() - 10);\n  }\n};\n\n/**\n * Scroll the chat history board one line down.\n *\n * @return {void}\n */\nChatHistory.prototype.scrollDown = function () {\n  if (this.getScrollPerc() < 100) {\n    this.setScrollPerc(this.getScrollPerc() + 10);\n  }\n};\n\n\nexports = module.exports = ChatHistory;\n","/home/travis/build/npmtest/node-npmtest-gitter-cli/node_modules/gitter-cli/lib/ui/widgets/chat-history-message.js":"var Blessed = require('blessed');\nvar Marked = require('../../core/marked');\nvar HtmlToText = require('html-to-text');\nvar Styles = require('../styles.json');\n\nvar format = require('util').format;\nvar wordwrap = require('wordwrap');\n\n// Set the lexer to be compatible with GitHub flavored markdown.\nvar Lexer = new Marked.Lexer({\n  gfm: true,\n  tables: false,\n  pedantic: true,\n  sanitize: true,\n  smartypants: true\n});\n\n\n/**\n * ChatHistoryMessage, inherits from `Blessed.Box`\n *\n * @param {object} options (optional)\n * @return {object}\n */\nvar ChatHistoryMessage = function (options) {\n  // Ensure the `new` instance.\n  if (!(this instanceof Blessed.Node)) {\n    return new ChatHistoryMessage(options);\n  }\n\n  // Override some options.\n  options = options || {};\n  options.shrink = true;\n  options.tags = true;\n  options.top = 0;\n  options.left = 0;\n  options.style = {\n    bg: Styles['chat-history-message'].bg,\n  };\n\n  // // Check if the message is unread.\n  // if (model.messageInstance.unread) {\n  //   // Set a highlighted background color.\n  //   options.style.bg = '#888';\n  // }\n\n  // Call the super.\n  Blessed.Box.call(this, options);\n\n  this.displayAuthorName = options.displayAuthorName;\n\n  // Get the `chatHistoryMessage` content.\n  var messageText = this.getMessageText(options.model);\n\n  // Create the message object for the current instance.\n  this.message = {\n    content: messageText,\n    linesAmount: this.getLinesAmount(messageText)\n  };\n\n  // Set the instance content to be the parsed text message.\n  this.content = this.message.content;\n\n  // Set the instance height to match the message lines.\n  this.height = this.message.linesAmount;\n  this.rows = this.height;\n};\n\nChatHistoryMessage.prototype = Object.create(Blessed.Box.prototype);\nChatHistoryMessage.prototype.type = 'chatHistoryMessage';\n\n/**\n * Parse the text to be inserted in the chat history.\n *\n * @param {string} messageText\n * @param {number} wordwrap\n * @return {string}\n */\nChatHistoryMessage.prototype.parseText = function (messageText, wordwrap) {\n  // Tokenize and parse the original text using the blessed-markdown parser.\n  var tokens = Lexer.lex(messageText);\n  messageText = Marked.parser(tokens);\n\n  // Convert any unconsiderated HTML to text.\n  messageText = HtmlToText.fromString(messageText, {\n    wordwrap: wordwrap || 80\n  });\n\n  // Return the clean message text.\n  return messageText;\n};\n\n/**\n * Render the text to be inserted in the chat history.\n *\n * @param {string} message\n * @return {string}\n */\nChatHistoryMessage.prototype.getMessageText = function (message) {\n  var authorName = message.author.getDisplayName();\n\n  if (authorName.length > 18) {\n    authorName = authorName.substring(0, 17);\n  } else if (authorName.length < 18) {\n    authorName = authorName + Array(18 - authorName.length).join(' ');\n  }\n\n  // Previous author length:\n  // message.author.getDisplayName().length + 3\n  var authorLength = 18,\n      parentWidth = this.screen.width,\n      messageMaxWidth = this.screen.width - authorLength - 4,\n      messageText = message.text;\n\n  // Parse the current text.\n  messageText = this.parseText(messageText, messageMaxWidth);\n\n  // Check if the message text is smaller than the max for the screen.\n  if (messageText.length > messageMaxWidth) {\n    // Word wrap the original message.\n    messageText = wordwrap(messageMaxWidth)(messageText);\n\n    // Process the message text.\n    messageText = messageText.split('\\n').map(function (line, index) {\n      // If is the first line, then leave it as it is.\n      if (index < 1) {\n        return line;\n      }\n\n      // Append a number `authorLength` number of spaces before the line.\n      return Array(authorLength + 1).join(' ') + line;\n    }).join('\\n');\n  }\n\n  var authorWithColor;\n  if (this.displayAuthorName) {\n    // Get the author name with his distintive display color.\n    authorWithColor = format('{%s-fg}%s{/%s-fg}',\n      message.author.getAuthorColor(),\n      authorName,\n      message.author.getAuthorColor()\n    );\n  } else {\n    authorWithColor = Array(authorLength).join(' ');\n  }\n\n  // Return the parsed text with a `{author}: {message}` format.\n  return format('%s %s', authorWithColor, messageText);\n};\n\n/**\n * Return the amount of lines.\n *\n * @param {string} messageText\n * @return {number}\n */\nChatHistoryMessage.prototype.getLinesAmount = function (messageText) {\n  var amountOfLineBrakes = messageText.split('\\n').length;\n  return (amountOfLineBrakes > 0) ? amountOfLineBrakes : 1;\n};\n\nexports = module.exports = ChatHistoryMessage;\n","/home/travis/build/npmtest/node-npmtest-gitter-cli/node_modules/gitter-cli/lib/ui/loading.js":"var Blessed = require('blessed');\n\nexports = module.exports = function (context) {\n  // Return a new blessed `Loading` instance.\n  return Blessed.loading();\n};\n","/home/travis/build/npmtest/node-npmtest-gitter-cli/node_modules/gitter-cli/lib/ui/message-input.js":"var Blessed = require('blessed');\nvar Styles = require('./styles.json');\n\nexports = module.exports = function (context) {\n  var input = Blessed.textarea({\n    bottom: 0,\n    height: 3,\n    autoPadding: true,\n    inputOnFocus: true,\n    padding: {\n      top: 1,\n      left: 2\n    },\n    style: Styles['message-input']\n  });\n\n  return input;\n};\n","/home/travis/build/npmtest/node-npmtest-gitter-cli/node_modules/gitter-cli/lib/ui/screen.js":"var Path = require('path');\nvar Blessed = require('blessed');\n\nexports = module.exports = function (context) {\n  // Create the screen object.\n  var screen = Blessed.screen({\n    autoPadding: true,\n    smartCSR: true,\n    useBCE: true,\n    cursor: {\n      artificial: true,\n      blink: true,\n      shape: 'underline'\n    },\n    log: Path.join(__dirname, '..', '..', 'gitter-cli-blessed.log'),\n    dump: true,\n    fullUnicode: true,\n    dockBorders: true,\n    ignoreLocked: ['C-c']\n  });\n\n  // Set the terminal title.\n  screen.title = 'Gitter';\n\n  return screen;\n};\n"}